{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "River",
  "patterns": [
    {
      "include": "#expression"
    }
  ],
  "repository": {
    "expression": {
      "patterns": [
        { "include": "#literals" },
        { "include": "#comment" },
        { "include": "#string" },
        { "include": "#raw_string" },
        { "include": "#block-header" }
      ]
    },
    "literals": {
      "patterns": [
        {
          "match": "\\b(true|false|null)\\b",
          "name": "constant.language.river"
        },
        {
          "match": "\\b(\\d+([Ee][+-]?\\d+)?)\\b",
          "name": "constant.numeric.river"
        },
        {
          "match": "\\b\\d+[.]\\d*([Ee][+-]?\\d+)?\\b",
          "name": "constant.numeric.river"
        },
        {
          "match": "\\b[.]\\d+([Ee][+-]?\\d+)?\\b",
          "name": "constant.numeric.river"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "match": "//.*$",
          "name": "comment.line.river"
        },
        {
          "begin": "/\\*",
          "end": "\\*/",
          "name": "comment.block.river"
        }
      ]
    },
    "string": {
      "begin": "\"",
      "end": "\"",
      "name": "string.quoted.double.river",
      "patterns": [
        {
          "match": "\\\\[0-7]{3}",
          "name": "constant.character.escape.river"
        },
        {
          "match": "\\\\[abfnrtv'\"]",
          "name": "constant.character.escape.river"
        },
        {
          "match": "\\\\x[0-9a-fA-F]{2}",
          "name": "constant.character.escape.river"
        },
        {
          "match": "\\\\u[0-9a-fA-F]{4}",
          "name": "constant.character.escape.river"
        },
        {
          "match": "\\\\U[0-9a-fA-F]{8}",
          "name": "constant.character.escape.river"
        },
        {
          "match": "\\\\[^0-7xuUabfnrtv'\"]",
          "name": "invalid.illegal.river"
        }
      ]
    },
    "raw_string": {
      "begin": "`",
      "end": "`",
      "name": "string.quoted.backtick.river"
    },
    "block-header": {
      "match": "^\\s*([A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Aa-z_][A-Za-z0-9_]*)*)([^\"=]*)(\".*\")?([^=]*)\\{",
      "captures": {
        "1": { "name": "entity.name.type.river" },
        "2": {
          "patterns": [
            { "include": "#comment" }
          ]
        },
        "3": { "name": "entity.name.tag.river" },
        "4": {
          "patterns": [
            { "include": "#comment" }
          ]
        }
      },
      "name": "meta.block-header.river"
    }
  },
  "scopeName": "source.river"
}
